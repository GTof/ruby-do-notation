Haskell-style monad do-notation for Ruby
========================================

Example:

    class Array
      extend Monad
      
      def self.unit x
        [x]
      end
      
      def bind &f
        map(&f).inject([]){ |a,b| a+b }
      end
    end
    
    Array.run do
      x <- ['A', 'a']
      y <- ['B', 'b']
      
      unit(x+y)
    end
    
    # => ["AB", "Ab", "aB", "ab"]

Its biggest failing, and I don't see a way
out, is that you don't get lexical scope. ParseTree
is wonderful, but it can't work miracles.

You can work around it, though, by passing in
stuff from the outside as arguments to `run',
and specifying those arguments on the block
you pass in as well.

For more examples, see the test suite.

By Aanand Prasad (aanand.prasad@gmail.com)
